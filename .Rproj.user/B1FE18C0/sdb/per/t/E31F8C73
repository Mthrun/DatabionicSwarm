{
    "collab_server" : "",
    "contents" : "#path=ReDi('WissenAusDaten2014/15Clusterung/01Transformierte/DataBased100')\npath=ReDi('WissenAusDaten2014/12cPswarm/11DataBased100Islands')\nnames=list.files(path)\nfilenames=names#names[201:300]\nerror=c()\nfor(k in 1:100){\n  Proj=ReadLRN(filenames[k],path)$Data\n  #error=ClassificationError(Proj,FCPS$Chainlink$Cls)\n  error=c(error,sum(DelaunayClassificationError(FCPS$Hepta$Data,Proj,FCPS$Hepta$Cls,8)))\n  \n}\nCCAhepta=list()\nerror2=c()\nfor(k in 1:100){\n  #Proj2=CCA(FCPS$Hepta$Data,Epochs = 20)$ProjectedPoints\n  #CCAhepta[[k]]=Proj2\n  #error=ClassificationError(Proj,FCPS$Chainlink$Cls)\n  error2=c(error2,sum(DelaunayClassificationError(FCPS$Hepta$Data,CCAhepta[[k]],FCPS$Hepta$Cls,8)))\n  \n}\nwilcox.test(error,error2,paired = T)\n# weitere Projektiosndaten aus 23TesteDelaunayClassificationError.R\nsetwd(ReDi('WissenAusDaten2014/12cPswarm/11Comparison'))\nload(file='Hepta')\nHeader\nData=FCPS$Hepta$Data\nCls=FCPS$Hepta$Cls\npcares=Output[[4]]\npcaerror=sum(DelaunayClassificationError(Data,pcares,Cls,k=8))\nnervres=Output[[3]]\nnervreserror=sum(DelaunayClassificationError(Data,nervres,Cls,k=8))\nsammonsres=Output[[5]]\nsammonerror=sum(DelaunayClassificationError(Data,sammonsres,Cls,k=8))\n\n\nerrorpath=ReDi('WissenAusDaten2014/12cPswarm/12ProjectionError')\nsetwd(errorpath)\nSwarmError100=error\nCCAerror100=error2\nwilcox.test(SwarmError100,CCAerror100,paired = T)\n\ntsneres=tSNE(FCPS$Hepta$Data)$ProjectedPoints\nPlotProjectedPoints(tsneres,FCPS$Hepta$Cls)\ntsnerrorerror=sum(DelaunayClassificationError(FCPS$Hepta$Data,tsneres,FCPS$Hepta$Cls,k=8))\ntsnerrorerror\n\nsave(file='HeptaError',tsneres,tsnerrorerror,CCAhepta,SwarmError100,CCAerror100,pcares,pcaerror,nervres,nervreserror,sammonsres,sammonerror)\n\nnervhepta=list()\nerror3=c()\nfor(k in 1:100){\n  Proj3=NeRV(FCPS$Hepta$Data)\n  nervhepta[[k]]=Proj3\n  #error=ClassificationError(Proj,FCPS$Chainlink$Cls)\n  error3=c(error3,sum(DelaunayClassificationError(FCPS$Hepta$Data,Proj3,FCPS$Hepta$Cls,8)))\n  \n}\n\n\nfilenames=names[101:200]\n\nerror=list(c(),c(),c(),c(),c(),c(),c())\nfor(k in 1:100){\n  Proj=ReadLRN(filenames[k],path)$Data\n  #error=ClassificationError(Proj,FCPS$Chainlink$Cls)\n  vec=DelaunayClassificationError(FCPS$Chainlink$Data,Proj,FCPS$Chainlink$Cls,8,c(64,64))\n  for(i in 1:length(vec))\n    error[[i]]=c(error[[i]],vec[i])\n}\n\nerror2=list(c(),c(),c(),c(),c(),c(),c())\nCCAchain=list()\nfor(k in 1:100){\n  Proj2=CCA(FCPS$Chainlink$Data,Epochs = 20)$ProjectedPoints\n  CCAchain[[k]]=Proj2\n  #error=ClassificationError(Proj,FCPS$Chainlink$Cls)\n  vec2=DelaunayClassificationError(FCPS$Chainlink$Data,Proj2,FCPS$Chainlink$Cls,8)\n  for(i in 1:length(vec2))\n    error2[[i]]=c(error2[[i]],vec2[i])\n}\nsave(file='ChainError',CCAchain,error,error2)\n\nwilcox.test(error,error2,paired = T)\n## Fazit: Toroide Karte ist ein Problem, falls die Ausgabe nicht wie bei hepta symmetrisch ist.\n#Folge: Ich muss fue Pswarm in Hepta, Atom, Chainlink, EngyTime jweils 100mal eine Insel auschneiden...\n#################\n\nsource(ReDi('WissenAusDaten2014/12cPswarm/08AnalyseProgramme/DelaunayClassificationError.R'))\nrequireRpackage('parallel')\nc1=makeCluster(8,type=\"PSOCK\")\nrequireRpackage('Rcpp')\nlibrary(RcppArmadillo)\nlibrary(tsne)\nout=ReDi('WissenAusDaten2014/12cPswarm/12ProjectionError')\nclusterExport(c1, c(\"Delaunay4Points\",\"DelaunayClassificationError\",\"CCA\",\"tSNE\",\"tsne\",\"requireRpackage\",\"ones\",\"zeros\",\"DistanceMatrix\"))\nsetwd(out)\nk=100\ni=1\nres=parLapply(c1,1:k,function(k,FCPS,i){\n  res=CCA(FCPS[[i]]$Data,Epochs = 20)$ProjectedPoints\n  error=sum(DelaunayClassificationError(FCPS[[i]]$Data,res,FCPS[[i]]$Cls,k=8))\n  return(list(res,error))\n},FCPS,i)\nsave(file='AtomCCA',res)\ni=1\nres=parLapply(c1,1:k,function(k,FCPS,i){\n  res=tSNE(FCPS[[i]]$Data)$ProjectedPoints\n  error=sum(DelaunayClassificationError(FCPS[[i]]$Data,res,FCPS[[i]]$Cls,k=8))\n  return(list(res,error))\n},FCPS,i)\nsave(file='AtomtSNE',res)\n\nData=FCPS$Atom$Data\nCls=FCPS$Atom$Cls\n\npcares=PCA(FCPS[[i]]$Data,2)$ProjectedPoints\npcaerror=sum(DelaunayClassificationError(Data,pcares,Cls,k=8))\nnervres=NULL\nnervreserror=NULL\nnervres=NeRV(FCPS[[i]]$Data,2)\nnervreserror=sum(DelaunayClassificationError(Data,nervres,Cls,k=8))\n\nsammonsres=SammonsMapping(FCPS[[i]]$Data,2)$ProjectedPoints\nsammonerror=sum(DelaunayClassificationError(Data,sammonsres,Cls,k=8))\n\nPswarmAtom=ReadLRN('PswarmCPPAtom1',ReDi('WissenAusDaten2014/15Clusterung/01Transformierte/DataBased100'))$Data\nPswarmAtomerror=sum(DelaunayClassificationError(Data,PswarmAtom,Cls,k=8))\n\n\nsave(file='NeRVPCASammonAtom',PswarmAtom,PswarmAtomerror,pcares,pcaerror,nervres,nervreserror,sammonsres,sammonerror)\n#Proj=ReadLRN('PswarmCPPAtom1.lrn',ReDi('WissenAusDaten2014/15Clusterung/01Transformierte/DataBased100'))$Data\n#plot(Proj,col=FCPS$Atom$Cls)\n#sum(DelaunayClassificationError(FCPS[[i]]$Data,Proj,FCPS[[i]]$Cls,k=8,LC=c(58,60)))\n#Uma=GeneratePswarmVisualization(FCPS$Atom$Data,Proj,c(58,60))\n#idealIsland = bestUmatrixTranslation(Uma$Umatrix, Uma$Bestmatches)\n#shiftL=shiftedUmatrix(idealIsland$lines, idealIsland$cols, Uma$Umatrix, Bestmatches = Uma$Bestmatches)\n#plot(shiftL$Bestmatches[,2:3],col=FCPS$Atom$Cls)\n#key=shiftL$Bestmatches[,1]\n#sum(DelaunayClassificationError(FCPS[[i]]$Data[key,],shiftL$Bestmatches[,2:3],FCPS[[i]]$Cls[key],k=8))\n#Proj2=Proj\n#Proj2[,1]=(Proj[,1]+30)%%58\n#Proj2[,2]=(Proj[,2]+5)%%60\n#plot(Proj2,col=FCPS$Atom$Cls)\n#sum(DelaunayClassificationError(FCPS[[i]]$Data,Proj2,FCPS[[i]]$Cls,k=8,LC=c(58,60)))\n#sum(DelaunayClassificationError(FCPS[[i]]$Data,Proj2,FCPS[[i]]$Cls,k=8)\n#Fazit: Bei Atom nehmen wir einfach normal toroid weil symmetrisch, analog zu hepta\n#Chainlink muss manuell ausgeschnitten werden\n\n###############################\n\n###############################\nout=ReDi('WissenAusDaten2014/12cPswarm/12ProjectionError')\nsetwd(out)\nsource(ReDi('WissenAusDaten2014/12cPswarm/08AnalyseProgramme/DelaunayClassificationError.R'))\nload(file='NeRVPCASammonAtom')\nsource('D:/Subversion/PUB/dbt/NeRV/R/NeRV.R')\n\npcaerror\nsammonerror\nnervreserror\nPlotProjectedPoints(nervres,FCPS$Atom$Cls)\n\n\n####################\n############################\ni=2\nData=FCPS$Chainlink$Data\nCls=FCPS$Chainlink$Cls\n\n# pcares=PCA(FCPS[[i]]$Data,2)$ProjectedPoints\n# pcaerror=sum(DelaunayClassificationError(Data,pcares,Cls,k=8))\n# \n# nervres=NeRV(FCPS[[i]]$Data,2)\n# nervreserror=sum(DelaunayClassificationError(Data,nervres,Cls,k=8))\n# \n# sammonsres=SammonsMapping(FCPS[[i]]$Data,2)$ProjectedPoints\n# sammonerror=sum(DelaunayClassificationError(Data,sammonsres,Cls,k=8))\n# \n# \n# save(file='ChainlinkNeRVPCASammon',pcares,pcaerror,nervres,nervreserror,sammonsres,sammonerror)\n\nres=parLapply(c1,1:k,function(k,FCPS,i){\n  res=tSNE(FCPS[[i]]$Data)$ProjectedPoints\n  return(res)\n},FCPS,i)\n\n\nTSNEerror100=c()\nfor(i in 1:100){\n  TSNEerror100=c(TSNEerror100,sum(DelaunayClassificationError(FCPS$Chainlink$Data,res[[i]],FCPS$Chainlink$Cls,k=8)))\n}\nPlotProjectedPoints(res[[1]],FCPS$Chainlink$Cls)\n\nsave(file='ChainlinktSNE',res,TSNEerror100)\n\nstopCluster(c1)\n\nsetwd(ReDi('WissenAusDaten2014/12cPswarm/11Comparison'))\nload(file='Chainlink')\n\nHeader\npcares=Output[[4]]\npcaerror=sum(DelaunayClassificationError(Data,pcares,Cls,k=8))\nnervres=Output[[3]]\nnervreserror=sum(DelaunayClassificationError(Data,nervres,Cls,k=8))\nsammonsres=Output[[5]]\nsammonerror=sum(DelaunayClassificationError(Data,sammonsres,Cls,k=8))\n\nsave(file='NeRVPCASammonChain',pcares,pcaerror,nervres,nervreserror,sammonsres,sammonerror)\n\n# \n# pcares=PCA(FCPS[[i]]$Data,2)$ProjectedPoints\n# pcaerror=sum(DelaunayClassificationError(Data,pcares,Cls,k=8))\n# \n# nervres=NeRV(FCPS[[i]]$Data,2)\n# nervreserror=sum(DelaunayClassificationError(Data,nervres,Cls,k=8))\n# \n# sammonsres=SammonsMapping(FCPS[[i]]$Data,2)$ProjectedPoints\n# sammonerror=sum(DelaunayClassificationError(Data,sammonsres,Cls,k=8))\n# \n# \n# sammonsres=SammonsMapping(FCPS[[i]]$Data,2)$ProjectedPoints\n# sammonerror=sum(DelaunayClassificationError(Data,sammonsres,Cls,k=8))\n\n#########################\n## Plotten\nerrorpath=ReDi('WissenAusDaten2014/12cPswarm/12ProjectionError')\nsetwd(errorpath)\nload(file='HeptaError')\nbarplot(c(Pswarm=mean(HeptaError),CCA=mean(CCAerror100),PCA=pcaerror,Sammons=sammonerror,NeRV=nervreserror,tSNE=tsnerrorerror)/7,main='Hepta',ylab='DelaunayNeighboorhood Classification Error')\n\nx=1\nProjSwarm=ReadLRN(paste0('PswarmCPPHepta',x,'.lrn'),ReDi('WissenAusDaten2014/15Clusterung/01Transformierte/DataBased100'))$Data\n\nresUmatrix=GeneratePswarmVisualization(FCPS$Hepta$Data,ProjSwarm,c(38,40),ComputeInR = T)\nimx=iIsland(resUmatrix$Umatrix,cbind(1:nrow(resUmatrix$Bestmatches),resUmatrix$Bestmatches),FCPS$Hepta$Cls)\nsave(file='PswarmIMX',imx,resUmatrix)\n\nload(file='PswarmIMX')\n\nIslandCut=UmxBmuFromIsland(resUmatrix$Umatrix,cbind(1:nrow(resUmatrix$Bestmatches),resUmatrix$Bestmatches),imx,FCPS$Hepta$Cls,Tiled = T)\n\nPlotProjectedPoints(IslandCut$Bestmatches[-c(75,143),],IslandCut$Cls[-c(75,143)])\nind1=which(IslandCut$Bestmatches[,1]==IslandCut$Bestmatches[75,1])\nind2=which(IslandCut$Bestmatches[,1]==IslandCut$Bestmatches[143,1])\n\npoints=IslandCut$Bestmatches[-c(2,75),]\nkey=points[,1]\nPlotProjectedPoints(points,FCPS$Hepta$Cls[key])\n\nPswarmerror=sum(DelaunayClassificationError(FCPS$Hepta$Data[key,],points,FCPS$Hepta$Cls[key],k=8))\n#andere Werte durch 212\nbarplot(c(Pswarm=Pswarmerror,CCA=mean(CCAerror100)/212,PCA=pcaerror/212,Sammons=sammonerror/212,NeRV=nervreserror/212,tSNE=tsnerrorerror/212),main='Hepta',ylab='DelaunayNeighboorhood Classification Error')\n\n############\n\nerrorpath=ReDi('WissenAusDaten2014/12cPswarm/12ProjectionError')\nsetwd(errorpath)\nload(file='NeRVPCASammonAtom')\n\nload(file='AtomCCA')\nCCAerror100=c()\nfor(i in 1:100){\n  CCAerror100=c(CCAerror100,res[[i]][[2]])\n}\n\nload(file='AtomtSNE')\nTSNEerror100=c()\nfor(i in 1:100){\n  TSNEerror100=c(TSNEerror100,res[[i]][[2]])\n}\nPlotProjectedPoints(res[[i]][[1]],FCPS$Atom$Cls)\n\nbarplot(c(Pswarm=PswarmAtomerror,CCA=mean(CCAerror100),PCA=pcaerror,Sammons=sammonerror,NeRV=nervreserror,tSNE=mean(TSNEerror100)),main='Atom',ylab='DelaunayNeighboorhood Classification Error')\n\n\n###########################################\n\nerrorpath=ReDi('WissenAusDaten2014/12cPswarm/12ProjectionError')\nsetwd(errorpath)\nload(file='ChainError')\nload(file='NeRVPCASammonChain')\nload(file='ChainlinktSNE')\n\nbarplot(c(Pswarm=sum(sapply(error,mean)),CCA=sum(sapply(error2,mean)),PCA=pcaerror,Sammons=sammonerror,NeRV=nervreserror,tSNE=mean(TSNEerror100)),main='Chainlink',ylab='DelaunayNeighboorhood Classification Error')\n\n\nx=1\nProjSwarm=ReadLRN(paste0('PswarmCPPChainlink',x,'.lrn'),ReDi('WissenAusDaten2014/15Clusterung/01Transformierte/DataBased100'))$Data\n\nresUmatrix=GeneratePswarmVisualization(FCPS$Chainlink$Data,ProjSwarm,c(64,64),ComputeInR = F)\nimx=iIsland(resUmatrix$Umatrix,cbind(1:nrow(resUmatrix$Bestmatches),resUmatrix$Bestmatches),FCPS$Chainlink$Cls)\nIslandCut=UmxBmuFromIsland(resUmatrix$Umatrix,cbind(1:nrow(resUmatrix$Bestmatches),resUmatrix$Bestmatches),imx,FCPS$Chainlink$Cls,Tiled = T)\nsave(file='PswarmChainIMX',imx,resUmatrix,IslandCut,ProjSwarm)\nload(file='PswarmChainIMX')\n\nPlotProjectedPoints(IslandCut$Bestmatches,IslandCut$Cls)\nkey=IslandCut$Bestmatches[,1]\nPswarmerror=sum(DelaunayClassificationError(FCPS$Chainlink$Data[key,],IslandCut$Bestmatches[,2:3],FCPS$Chainlink$Cls[key],k=8))\n\nbarplot(c(Pswarm=Pswarmerror,CCA=sum(sapply(error2,mean))/1000,PCA=pcaerror/1000,Sammons=sammonerror/1000,NeRV=nervreserror/1000,tSNE=mean(TSNEerror100)/1000),main='Chainlink',ylab='DelaunayNeighboorhood Classification Error')\nerrorsOfProjection=c(Pswarm=Pswarmerror,CCA=sum(sapply(error2,mean))/1000,PCA=pcaerror/1000,Sammons=sammonerror/1000,NeRV=nervreserror/1000,tSNE=mean(TSNEerror100)/1000)\nsave(file='ChainErrorComplete',errorsOfProjection)",
    "created" : 1467128643746.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "269768812",
    "id" : "E31F8C73",
    "lastKnownWriteTime" : 1467129765,
    "last_content_update" : 1467129765115,
    "path" : "D:/Subversion/PRO/Research/WissenAusDaten2014/12cPswarm/08AnalyseProgramme/25DelaunayClassificationError100mal.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}