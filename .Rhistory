source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/pswarmCpp.R')
updateDBT()
updateDBT()
updateDBT()
pswarmCpp(FCPS$Hepta$Data,PlotIt = T,Silent = F,Debug = T)
updateDBT()
pswarmCpp(FCPS$Hepta$Data,PlotIt = T,Silent = F,Debug = T)
?floor
updateDBT()
pswarmCpp(FCPS$Hepta$Data,PlotIt = T,Silent = F,Debug = T)
pswarmCpp(FCPS$Hepta$Data,PlotIt = T,Silent = F,Debug = T)
updateDBT()
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/pswarmCpp.R')
updateDBT()
pswarmCpp(FCPS$Hepta$Data,PlotIt = T,Silent = F,Debug = T)
pswarmCpp(FCPS$Hepta$Data,PlotIt = T,Silent = F,Debug = T)
pswarmCpp(FCPS$Hepta$Data,PlotIt = T,Silent = F,Debug = T)
resU=GeneratePswarmVisualization(Data,res$ProjectedPoints,res$LC)
#Wisconsin Breast Cancer Database
requireRpackage('mlbench')
data(BreastCancer)
BreastCancerD=BreastCancer[,2:10]
Cls=as.numeric(BreastCancer[,11])
requireNamespace('stats')
Dist1=stats::dist(BreastCancerD)
res=pswarmCpp(as.matrix(Dist1),PlotIt = T,Cls = Cls)
Data=as.matrix(BreastCancerD)
Cls2=DBSclustering(2,Data,res$ProjectedPoints,res$LC,T)
resU=GeneratePswarmVisualization(Data,res$ProjectedPoints,res$LC)
Data2=MDS(as.matrix(Dist1),OutputDimension = 9)$ProjectedPoints
resU=GeneratePswarmVisualization(Data2,res$ProjectedPoints,res$LC)
plotUmatrix(resU$Umatrix,resU$Bestmatches,Cls)
updateDBT()
updateDBT()
updateDBT()
# 03GeneralizedUnatrix.R
# erzeugung einer generalisierten U-matrix
#########################################################################
# Sammons Mapping of Chainlink
# einlesen
LrnDirectory	= ReDi('GeneralizedUmatrix2017/09Originale')
LrnFileName     = 'Chainlink.lrn';
V<- ReadLRN(LrnFileName,LrnDirectory)
Data=    V$Data
Key =    V$Key
Names =  V$Header
# Feststellen der Groesse
V<- size(Data)
AnzDaten = V[1]; AnzDaten
AnzVariablen= V[2]; AnzVariablen
# Cls einlesen
V <- ReadCLS('Chainlink.cls',LrnDirectory);
ClsKey = V$ClsKey
Cls    = V$Cls
TheSameKey(ClsKey,Key)
# projektionen einlesen
LrnDirectory	= ReDi('GeneralizedUmatrix2017/01Transformierte')
LrnFileName     = '01ChanlinkSammonMappingPlanar.lrn';
V<- ReadLRN(LrnFileName,LrnDirectory)
ProjectedPoints=    V$Data
Key =    V$Key
Names =  V$Header
V<- size(ProjectedPoints)
AnzDaten = V[1]; AnzDaten
AnzVariablen= V[2]; AnzVariablen
PlotIt=TRUE
toroid=F
Tiled=F
ComputeInR=F
getUmatrix4Projection(Data,ProjectedPoints,PlotIt,c(),toroid,Tiled,ComputeInR)
# 03GeneralizedUnatrix.R
# erzeugung einer generalisierten U-matrix
#########################################################################
# Sammons Mapping of Chainlink
# einlesen
LrnDirectory	= ReDi('GeneralizedUmatrix2017/09Originale')
LrnFileName     = 'Chainlink.lrn';
V<- ReadLRN(LrnFileName,LrnDirectory)
Data=    V$Data
Key =    V$Key
Names =  V$Header
# Feststellen der Groesse
V<- size(Data)
AnzDaten = V[1]; AnzDaten
AnzVariablen= V[2]; AnzVariablen
# Cls einlesen
V <- ReadCLS('Chainlink.cls',LrnDirectory);
ClsKey = V$ClsKey
Cls    = V$Cls
TheSameKey(ClsKey,Key)
# projektionen einlesen
LrnDirectory	= ReDi('GeneralizedUmatrix2017/01Transformierte')
LrnFileName     = '01ChanlinkSammonMappingPlanar.lrn';
V<- ReadLRN(LrnFileName,LrnDirectory)
ProjectedPoints=    V$Data
Key =    V$Key
Names =  V$Header
V<- size(ProjectedPoints)
AnzDaten = V[1]; AnzDaten
AnzVariablen= V[2]; AnzVariablen
PlotIt=TRUE
toroid=F
Tiled=F
ComputeInR=F
getUmatrix4Projection(Data,ProjectedPoints,PlotIt,c(),toroid,Tiled,ComputeInR)
# getUmatrix4Projection=function(Data,ProjectedPoints,PlotIt=TRUE,Cls=NULL,toroid=T,Tiled=F,ComputeInR=F){
R.version
updateDBT()
updateDBT()
data("Lsun3D")
plot3
library(rgl)
plot3d(Lsun3D$Data[,1],Lsun3D$Data[,2].Lsun3D$Data[,3],col=Lsun3D$Cls)
plot3d(Lsun3D$Data[,1],Lsun3D$Data[,2],Lsun3D$Data[,3],col=Lsun3D$Cls)
plot3d(Lsun3D$Data[,1],Lsun3D$Data[,2],Lsun3D$Data[,3],col=Lsun3D$Cls,xlab = 'X',ylab = 'Y',zlab = 'Z')
rgl.snapshot('LSUN3D','png')
getwd()
setwd(ReDi('WissenAusDaten2014/15Clusterung/04ESOMUmatrix/Leuk'))
load('Leukaemien.rda')
PlotProjectedPoints(res$ProjectedPoints,Cls)
path=ReDi('WissenAusDaten2014/15Clusterung/04ESOMUmatrix/Leuk')
setwd(path)
load('LeukaemienDBS2.rda')
plotUmatrix(ustar,DBSres$BestMatches,Cls)
ustar=calcUstarmatrix(Umatrix = DBSres$Umatrix,DBSres$Pmatrix)
plotUmatrix(ustar,DBSres$BestMatches,Cls)
Silhouette(Data2,Cls)
Cls=ReadCLS('LeukaemienDBS',path)$Cls
Silhouette(Data2,Cls)
path=ReDi('WissenAusDaten2014/15Clusterung/04ESOMUmatrix/Leuk')
setwd(path)
load('LeukaemienDBS2.rda')
Cls=ReadCLS('LeukaemienDBS',path)$Cls
Silhouette(Data,Cls)
Silhouette(Data2,Cls)
load('LeukaemienDBS2.rda')
path=ReDi('WissenAusDaten2014/15Clusterung/04ESOMUmatrix/Leuk')
setwd(path)
load('LeukaemienDBS2.rda')
Data=ReadLRN('Leukaemien',ReDi('WissenAusDaten2014/15Clusterung/01Transformierte/Leuk'))$Data
Silhouette(Data,Cls)
ClassCount(Cls)
Cls=ReadCLS('LeukaemienDBS',path)$Cls
ClassCount(Cls)
Silhouette(Data,Cls)
HeatMap(Data,Cls)
getwd
getwd()
Cls2=RenameDescendingClassSize(Cls)
Silhouette(Data,Cls2)
setwd(ReDi("WissenAusDaten2014/19Conferences/04Umatrix"))
load(file='NerV_TetrangulaClustering.rda')
Silhouette(Data,ClsNerv)
HeatMap(Data,ClsNerv)
Silhouette(Data,RenameDescendingClassSize(ClsNerv))
HeatMap(Data,RenameDescendingClassSize(ClsNerv))
imx=ReadIMX('NervTetra',getwd())
showUmatrix3D(um$Umatrix,um$Bestmatches,Cls = ClsNerv2,Imx = imx$Imx,ClsColors=c("green","blue","magenta","cyan","black","yellow","red"),BmSize = 1.2)
ClsNerv2=RenameDescendingClassSize(ClsNerv)
plotTopographicMap(um$Umatrix,um$Bestmatches,Cls = ClsNerv2,Imx = imx)
showUmatrix3D(um$Umatrix,um$Bestmatches,Cls = ClsNerv2,Imx = imx$Imx,ClsColors=c("green","blue","magenta","cyan","black","yellow","red"),BmSize = 1.2)
showUmatrix3D(um$Umatrix,um$Bestmatches,Cls = ClsNerv2,Imx = imx,ClsColors=c("green","blue","magenta","cyan","black","yellow","red"),BmSize = 1.2)
library(rgl)
rgl.snapshot('umatrix','png')
getwd()
showUmatrix3D(um$Umatrix,um$Bestmatches,Cls = ClsNerv2,Imx = imx,ClsColors=c("green","blue","magenta","cyan","black","yellow","red"),BmSize = 1.5)
showUmatrix3D(um$Umatrix,um$Bestmatches,Cls = ClsNerv2,Imx = imx,ClsColors=c("green","blue","magenta","cyan","black","yellow","red"),BmSize = 2)
rgl.snapshot('umatrix','png')
R.Version()
library(DatabionicSwarm)
requireRpackage('parallelDist')
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.0.3.tar.gz", repos = NULL, type = "source")
Pswarm(FCPS$Hepta$Data)
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.0.3.tar.gz", repos = NULL, type = "source")
install.packages("D:/Subversion/PUB/dbt/AdaptGauss_1.3.4.tar.gz", repos = NULL, type = "source")
install.packages("D:/Subversion/PUB/dbt/DataVisualizations_0.9.11.tar.gz", repos = NULL, type = "source")
unblockDBT()
blockDBT()
installDBTDependencies()
installDBTDependencies()
dbtDependencies <-c('abind','AID','akima','arules','cccd','cclust','caTools','chron','dbscan','doRNG','devtools','deldir','digest','e1071','fastICA','fastmatch','fields','fastICA','FastKNN','foreach','forecast','GA', 'geometry','gtools','ggm','ggmap','gplots','ggplot2','Hmisc','imputeTS',
'kernlab','lsa', 'lattice','magic','matrixStats','matrixcalc','mclust','MASS','matlab','mime','mclust','mvtnorm','nlme','neuralnet','parallelDist','pcaPP','pdist','phyclust','plotly','plotrix','png','plyr','pracma','ProjectionBasedClustering','prophet','randomForest','rpart','rpart.plot','rpart.utils','RPMG','reshape2','Rcpp','RcppArmadillo','rgl','rugarch','rworldmap','signal','shiny',
'shinyjs','shinyRGL','signal','sm','spatstat','spdep','sphet','SuppDists','tsne','tswge','TSdist','vegan','waveslim','xts','zoo')
.dbtDependencies <-c('abind','AID','akima','arules','cccd','cclust','caTools','chron','dbscan','doRNG','devtools','deldir','digest','e1071','fastICA','fastmatch','fields','fastICA','FastKNN','foreach','forecast','GA', 'geometry','gtools','ggm','ggmap','gplots','ggplot2','Hmisc','imputeTS',
'kernlab','lsa', 'lattice','magic','matrixStats','matrixcalc','mclust','MASS','matlab','mime','mclust','mvtnorm','nlme','neuralnet','parallelDist','pcaPP','pdist','phyclust','plotly','plotrix','png','plyr','pracma','ProjectionBasedClustering','prophet','randomForest','rpart','rpart.plot','rpart.utils','RPMG','reshape2','Rcpp','RcppArmadillo','rgl','rugarch','rworldmap','signal','shiny',
'shinyjs','shinyRGL','signal','sm','spatstat','spdep','sphet','SuppDists','tsne','tswge','TSdist','vegan','waveslim','xts','zoo')
installDBTDependencies()
unblockDBT()
updateDBT
updateDBT()
updateDBT()
updateDBT()
R.Version()
setwd(ReDi("WissenAusDaten2014/21ProjectionBasedClustering/09Originale"))
load(file='HighDimData.rda')#,Wine,Leukemia,SwissBanknotes,Iris,Breastcancer,WeinsteinCancer)
DataSets=list(Breastcancer=Breastcancer,
Iris=Iris,Leukemia=Leukemia,
SwissBanknotes=SwissBanknotes,
WeinsteinCancer=WeinsteinCancer,
Wine=Wine)
Data=DataSets$Leukemia$Data
ClsOld=DataSets$Leukemia$Cls
ClusterNo=length(unique(ClsOld))
setwd(ReDi('WissenAusDaten2014/21ProjectionBasedClustering/02Results/PopularAlgorithmsClustering'))
filename='Leukemia'
n=10
x=kmeansClustering(Data,ClusterNo)
Radius=log(sqrt(min(x$SumDistsToCentroids))*0.5)
AccuracyOrclus=rep(NaN,n)
AccuracyProClus=rep(NaN,n)
AccuracyQT=rep(NaN,n)
OrclusL= list()
ProClusL= list()
QTL= list()
load(file=paste0(filename,'Proclus','.rda'))
filename
filename='Weinstein'
load(file=paste0(filename,'Proclus','.rda'))
filename='WeinsteinCancer'
load(file=paste0(filename,'Proclus','.rda'))
Data=DataSets$WeinsteinCancer$Data
ClsOld=DataSets$WeinsteinCancer$Cls
ClusterNo=length(unique(ClsOld))
setwd(ReDi('WissenAusDaten2014/21ProjectionBasedClustering/02Results/PopularAlgorithmsClustering'))
filename='WeinsteinCancer'
for(i in 5:n){
#Cls11=SubspaceClustering(Data,ClusterNo = ClusterNo,Algorithm = 'orclus',DimSubspace = 5)$Cls
print(i)
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
print(i)
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
# acc13=ClusteringAccuracy(ClsOld,Cls13)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
# AccuracyQT[i]=acc13
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
# QTL= c(QTL,list(Cls13))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
# QT=list(ClsL=QTL,AccuracyQT=AccuracyQT)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus','.rda'),Proclus)
#save(file=paste0(filename,'QT','.rda'),QT)
}
install.packages("subspace")
for(i in 5:n){
#Cls11=SubspaceClustering(Data,ClusterNo = ClusterNo,Algorithm = 'orclus',DimSubspace = 5)$Cls
print(i)
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
print(i)
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
# acc13=ClusteringAccuracy(ClsOld,Cls13)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
# AccuracyQT[i]=acc13
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
# QTL= c(QTL,list(Cls13))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
# QT=list(ClsL=QTL,AccuracyQT=AccuracyQT)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus','.rda'),Proclus)
#save(file=paste0(filename,'QT','.rda'),QT)
}
i=6
print(i)
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
print(i)
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
# acc13=ClusteringAccuracy(ClsOld,Cls13)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
# AccuracyQT[i]=acc13
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
# QTL= c(QTL,list(Cls13))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
# QT=list(ClsL=QTL,AccuracyQT=AccuracyQT)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus2','.rda'),Proclus)
#save(file=paste0(filename,'QT','.rda'),QT)
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus2','.rda'),Proclus)
}
i=6
i=7
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
print(i)
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus2','.rda'),Proclus)
}
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus2','.rda'),Proclus)
i
i=8
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
print(i)
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus2','.rda'),Proclus)
}
i
i=9
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
print(i)
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus2','.rda'),Proclus)
i=10
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
print(i)
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
#AccuracyOrclus[i]=acc11
AccuracyProClus[i]=acc12
#OrclusL= c(OrclusL,list(Cls11))
ProClusL= c(ProClusL,list(Cls12))
#Orclus=list(ClsL=OrclusL,AccuracyOrclus=AccuracyOrclus)
Proclus=list(ClsL=ProClusL,AccuracyProClus=AccuracyProClus)
#save(file=paste0(filename,'Orclus','.rda'),Orclus)
save(file=paste0(filename,'Proclus2','.rda'),Proclus)
Proclus2=Proclus
load(file=paste0(filename,'Proclus2','.rda'))
load(file=paste0(filename,'Proclus','.rda'))
AccuracyTemp=c(Proclus$AccuracyProClus,Proclus2$AccuracyProClus)
AccuracyTemp
AccuracyTemp=c(Proclus$AccuracyProClus[1:2],Proclus2$AccuracyProClus[5:10])
Proclus3=list(CsL=c(Proclus$ClsL,Proclus2$ClsL))
Proclus3=list(CsL=c(Proclus$ClsL,Proclus2$ClsL),Accuracy=AccuracyTemp)
Acc=sapply(1:length(Proclus3$CsL), function(i,x,y) ClusteringAccuracy(y,x[[i]]),Proclus3$CsL,WeinsteinCancer$Cls) )
Acc=sapply(1:length(Proclus3$CsL), function(i,x,y) ClusteringAccuracy(y,x[[i]]),Proclus3$CsL,WeinsteinCancer$Cls)
Proclus3=list(CsL=c(Proclus$ClsL,Proclus2$ClsL),Accuracy=Acc)
save(file=paste0(filename,'Proclus3','.rda'),Proclu3)
save(file=paste0(filename,'Proclus3','.rda'),Proclus3)
i=11
Cls12=SubspaceClustering(Data,Algorithm = 'ProClus',ClusterNo = ClusterNo,DimSubspace = 10)$Cls
#Cls13=QTClustering(Data,Radius = Radius)$Cls
#acc11=ClusteringAccuracy(ClsOld,Cls11)
acc12=ClusteringAccuracy(ClsOld,Cls12)
Proclus3=list(CsL=c(Proclus$ClsL,Proclus2$ClsL,Cls12),Accuracy=c(Acc,acc12))
Proclus3=list(CsL=c(Proclus$ClsL,Proclus2$ClsL,list(Cls12)),Accuracy=c(Acc,acc12))
Proclus=Proclus3
save(file=paste0(filename,'Proclus','.rda'),Proclus)
updateDBT()
updateDBT()
x=c(runif(100,min = 0.5,max = 1.5),runif(100,min = 4.5,max = 5.5))
y=x=c(runif(100,min = 0.5,max = 1.5),runif(100,min = 4.5,max = 5.5))
plot(x,y)
plot(x,y)
?runif
y=x=c(rnorm(100,mean = 0.5, sd= 1.5),rnorm(100,mean = 4.5,sd = 5.5))
plot(x,y)
y=x=c(rnorm(200,mean = 0.5, sd= 1.5))#,rnorm(100,mean = 4.5,sd = 5.5))
plot(x,y)
plot(x)
y=x=c(rnorm(200,mean = 0.5, sd= 1.5),rnorm(100,mean = 4.5,sd = 5.5))
plot(y)
y=x=c(rnorm(100,mean = 0.5, sd= 1.5),rnorm(100,mean = 4.5,sd = 5.5))
plot(y)
y=x=c(rnorm(100,mean = 0.5, sd= 1.5),rnorm(100,mean = 4.5,sd = 0.5))
plot(y)
y=x=c(rnorm(100,mean = 0.5, sd= 0.5),rnorm(100,mean = 4.5,sd = 0.5))
plot(y)
x=c(1:50,1:50,50:100,50:100)
plot(x,y)
x=c(1:50,1:50,51:100,51:100)
plot(x,y)
x=c(1:50,1:50,100:150,100:150)
plot(x,y)
x=c(1:50,1:50,101:150,101:150)
plot(x,y)
x=c(1:25,1:25,1:25,1:25,101:150,101:150)
plot(x,y)
x=c(1:25,1:25,1:25,1:25,101:125,101:125,101:125,101:125)
plot(x,y)
cor(x,y)
?cor
cor(x,y, use = "everything")
cor(x,y,method=c("pearson", "kendall", "spearman"))
cor(x,y,method=c("pearson"))
cor(x,y,method=c("spearman"))
cor(x,y,method=c("kendall"))
p=cor(x,y,method=c("pearson"))
s=cor(x,y,method=c("spearman"))
main=paste('Pearson:',p,'- Spearman:',s)
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
main=paste('Pearson:',round(p,2),'- Spearman:',round(s,2))
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
?cor
?cor.test
cor.test(x,y,method = 'pearson')
x=cor.test(x,y,method = 'pearson')
x=c(1:25,1:25,1:25,1:25,101:125,101:125,101:125,101:125)
p2=cor.test(x,y,method = 'pearson')
p2=cor.test(x,y,method = 'pearson')$p.value
p2
p3=cor.test(x,y,method = 'Spearman')$p.value
p3
p3=cor.test(x,y,method = 'spearman')$p.value
p3
cor.test(x,y,method = 'pearson')
main=paste('Pearson:',round(p,2),'- Spearman:',round(s,2),'p values <0.001')
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
main=paste('Pearson:',round(p,2),'- Spearman:',round(s,2),'with p values <0.001')
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
utils::promptPackage()
utils::promptPackage('DatabionicSwarm')
blockDBT
blockDBT()
updateDBT()
updateDBT()
updateDBT()
updateDBT()
unblockDBT()
?`DatabionicSwarm-package`
library(mclust)
citation("mclust")
?citation("mclust")
?citEntry
citation("DatabionicSwarm")
?bibentry
library(mclust)
?Pswarm
updateDBT()
?`DatabionicSwarm-package`
?par
Pswarm(FCPS$Hepta$Data)
?echo
??echo
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.0.tar.gz", repos = NULL, type = "source")
?`DatabionicSwarm-package`
?Heatmap
?SilhouettePlot
?knit_hooks
library(DatabionicSwarm)
?rglwidget
??rglwidget
?open3d
??open3d
library(rgl)
?open3d
updateDBT()
#
updateDBT()
updateDBT()
?`DatabionicSwarm-package`
?Pswarm
