plot(y)
y=x=c(rnorm(100,mean = 0.5, sd= 0.5),rnorm(100,mean = 4.5,sd = 0.5))
plot(y)
x=c(1:50,1:50,50:100,50:100)
plot(x,y)
x=c(1:50,1:50,51:100,51:100)
plot(x,y)
x=c(1:50,1:50,100:150,100:150)
plot(x,y)
x=c(1:50,1:50,101:150,101:150)
plot(x,y)
x=c(1:25,1:25,1:25,1:25,101:150,101:150)
plot(x,y)
x=c(1:25,1:25,1:25,1:25,101:125,101:125,101:125,101:125)
plot(x,y)
cor(x,y)
?cor
cor(x,y, use = "everything")
cor(x,y,method=c("pearson", "kendall", "spearman"))
cor(x,y,method=c("pearson"))
cor(x,y,method=c("spearman"))
cor(x,y,method=c("kendall"))
p=cor(x,y,method=c("pearson"))
s=cor(x,y,method=c("spearman"))
main=paste('Pearson:',p,'- Spearman:',s)
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
main=paste('Pearson:',round(p,2),'- Spearman:',round(s,2))
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
?cor
?cor.test
cor.test(x,y,method = 'pearson')
x=cor.test(x,y,method = 'pearson')
x=c(1:25,1:25,1:25,1:25,101:125,101:125,101:125,101:125)
p2=cor.test(x,y,method = 'pearson')
p2=cor.test(x,y,method = 'pearson')$p.value
p2
p3=cor.test(x,y,method = 'Spearman')$p.value
p3
p3=cor.test(x,y,method = 'spearman')$p.value
p3
cor.test(x,y,method = 'pearson')
main=paste('Pearson:',round(p,2),'- Spearman:',round(s,2),'p values <0.001')
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
main=paste('Pearson:',round(p,2),'- Spearman:',round(s,2),'with p values <0.001')
plot(x,y,xlab='Variable 1',ylab='Variable 2',main = main)
utils::promptPackage()
utils::promptPackage('DatabionicSwarm')
blockDBT
blockDBT()
updateDBT()
updateDBT()
updateDBT()
updateDBT()
unblockDBT()
?`DatabionicSwarm-package`
library(mclust)
citation("mclust")
?citation("mclust")
?citEntry
citation("DatabionicSwarm")
?bibentry
library(mclust)
?Pswarm
updateDBT()
?`DatabionicSwarm-package`
?par
Pswarm(FCPS$Hepta$Data)
?echo
??echo
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.0.tar.gz", repos = NULL, type = "source")
?`DatabionicSwarm-package`
?Heatmap
?SilhouettePlot
?knit_hooks
library(DatabionicSwarm)
?rglwidget
??rglwidget
?open3d
??open3d
library(rgl)
?open3d
updateDBT()
#
updateDBT()
updateDBT()
?`DatabionicSwarm-package`
?Pswarm
updateDBT()
?`DatabionicSwarm-package`
Data=c()
Data=cbind(Data,c(2,2,3))
Data=cbind(Data,c(2,2,3))
Data
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data#)
RobustNormalization(Data)
RobustNormalization(Data,WithBackTransformation = T)
RobustNormalization(Data[,1],WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data,WithBackTransformation = T)
RobustNormalization(Data=Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
debugSource('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data=Data,WithBackTransformation = T)
RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
RobustNormalization(Data,WithBackTransformation = T)
aa=RobustNormalization(Data,WithBackTransformation = T)
Data=cbind(c(1,2,3),c(3,4,5))
aa=RobustNormalization(Data,WithBackTransformation = T)
Data=cbind(c(1,2,3),c(3,43,5))
aa=RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
aa=RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
aa=RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
aa=RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
aa=RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
aa=RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
aa=RobustNormalization(Data,WithBackTransformation = T)
source('D:/Subversion/PUB/dbt/DataBionicSwarm/R/RobustNormalization.R')
aa=RobustNormalization(Data,WithBackTransformation = T)
library(DatabionicSwarm)
?RobustNormalization
m=cbind(c(1,2,3),c(2,6,4))
List=RobustNormalization(m,T,F,F,T)
TransformedData=List$TransformedData
mback=List$Denom*(TransformedData+List$MinX)
List$Denom*
List$Denom
TransformedData+List$MinX
List$MinX
TransformedData+List$MinX
TransformedData+t(List$MinX)
TransformedData
m*c(2,3)
m
m%*%c(2,3)
TransformedData=List$TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
mback=c()
TransformedData=List$TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
mback=TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
}
mback=TransformedData
for(i in 1:ncol(TransformedData)){
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
}
mback
m
m=cbind(c(1,2,3),c(2,6,4))
List=RobustNormalization(m,T,F,F,T)
TransformedData=List$TransformedData
mback=TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
sum(m-mback)
m=cbind(c(1,2,3),c(2,6,4))
List=RobustNormalization(m,T,F,F,T)
TransformedData=List$TransformedData
mback=TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
m-mback
List$MinX[i]
List$MinX
List$Denom
i=1
(TransformedData[,i]+List$MinX[i])*List$Denom[i]
i=2
(TransformedData[,i]+List$MinX[i])*List$Denom[i]
mback
m
RobustNormalization(m[,2],T,F,F,T)
m=cbind(c(1,2,3),c(2,6,4))
List=RobustNormalization(m,F,F,F,T)
TransformedData=List$TransformedData
mback=TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
sum(m-mback)
mback
m
RobustNormalization(m[,2],F,F,F,T)
TransformedData[,2]
3.92*(TransformedData[,2]+2.04)
m=cbind(c(1,2,3),c(1,2,3))
List=RobustNormalization(m,F,F,F,T)
TransformedData=List$TransformedData
mback=TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]+List$MinX[i])*List$Denom[i]
sum(m-mback)
m
mback
m=cbind(c(1,2,3),c(1,2,3))
List=RobustNormalization(m,F,F,F,T)
TransformedData=List$TransformedData
mback=TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=(TransformedData[,i]*List$Denom[i]+List$MinX[i])
sum(m-mback)
m
mback
m=cbind(c(1,2,3),c(2,6,4))
List=RobustNormalization(m,F,F,F,T)
TransformedData=List$TransformedData
mback=TransformedData
for(i in 1:ncol(TransformedData))
mback[,i]=TransformedData[,i]*List$Denom[i]+List$MinX[i]
sum(m-mback)
rnorm(100,2,100)
Scaled=RobustNormalization(rnorm(100,2,100))
range(Scaled)
hist(Scaled)
Scaled=RobustNormalization(rnorm(100,2,100),Capped=T)
hist(Scaled)
Scaled=RobustNormalization(rnorm(100,2,100),Capped=T)
histopt(Scaled)
Scaled=RobustNormalization(rnorm(1000,2,100),Capped=T)
histopt(Scaled)
Scaled=RobustNormalization(rnorm(1000,2,100),Capped=T)
hist(Scaled)
Scaled=RobustNormalization(rnorm(1000,2,100),Capped=F)
hist(Scaled)
hist(rnorm(1000,2,100))
library(DatabionicSwarm)
updateDBT()
updateDBT()
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.1.zip", repos = NULL, type = "win.binary")
updateDBT()
blockDBT()
updateDBT()
updateDBT()
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.1.tar.gz", repos = NULL, type = "source")
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.1.zip", repos = NULL, type = "win.binary")
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.1.zip", repos = NULL, type = "win.binary")
unblockDBT()
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.3.tar.gz", repos = NULL, type = "source")
## Evaluete Clusters ----
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/04DBS'))
load(file='DBSQ1_FullYahooDataV3.rda')#,Cls3,Data,Names,DataT4,InputDist,projL2,um2,proj2,imx2,DCE,MDStrans,Key,normalized)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/02Clusterungen'))
Cls=read.table(file='EndClusteringQ1.cls',sep = '\t',header = T)
ClassCount(Cls$X269)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/99RawData'))
load('YahooStocks.rda')
temp=DBSclustering(k = 3,DataOrDistance = DataT4,PlotIt = T,BestMatches = proj2$ProjectedPoints,LC = proj2$LC[c(2,1)],StructureType = F,horiz=T)
library(DatabionicSwarm)
## Evaluete Clusters ----
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/04DBS'))
load(file='DBSQ1_FullYahooDataV3.rda')#,Cls3,Data,Names,DataT4,InputDist,projL2,um2,proj2,imx2,DCE,MDStrans,Key,normalized)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/02Clusterungen'))
Cls=read.table(file='EndClusteringQ1.cls',sep = '\t',header = T)
ClassCount(Cls$X269)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/99RawData'))
load('YahooStocks.rda')
temp=DBSclustering(k = 3,DataOrDistance = DataT4,PlotIt = T,BestMatches = proj2$ProjectedPoints,LC = proj2$LC[c(2,1)],StructureType = F,horiz=T)
plotTopographicMap(um2$Umatrix,um2$Bestmatches,Cls =Cls$X269,Imx = imx2,NoLevels=10)
#source('D:/Subversion/PRO/Research/WissenAusDaten2014/18FinanceStocks/08AnalyseProgramme/NormalizeUmatrix.R', encoding = 'UTF-8')
um3=NormalizeUmatrix(MDStrans,um2$Umatrix,um2$Bestmatches)
install.packages("D:/Subversion/PUB/dbt/GeneralizedUmatrix_1.1.6.tar.gz", repos = NULL, type = "source")
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/04DBS'))
load(file='DBSQ1_FullYahooDataV3.rda')#,Cls3,Data,Names,DataT4,InputDist,projL2,um2,proj2,imx2,DCE,MDStrans,Key,normalized)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/02Clusterungen'))
Cls=read.table(file='EndClusteringQ1.cls',sep = '\t',header = T)
ClassCount(Cls$X269)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/99RawData'))
load('YahooStocks.rda')
temp=DBSclustering(k = 3,DataOrDistance = DataT4,PlotIt = T,BestMatches = proj2$ProjectedPoints,LC = proj2$LC[c(2,1)],StructureType = F,horiz=T)
plotTopographicMap(um2$Umatrix,um2$Bestmatches,Cls =Cls$X269,Imx = imx2,NoLevels=10)
#source('D:/Subversion/PRO/Research/WissenAusDaten2014/18FinanceStocks/08AnalyseProgramme/NormalizeUmatrix.R', encoding = 'UTF-8')
um3=NormalizeUmatrix(MDStrans,um2$Umatrix,um2$Bestmatches)
um4=upscaleUmatrix(Umatrix = um3,BestMatches = um2$Bestmatches,Imx = imx2)
plotTopographicMap(um4$Umatrix,um4$Bmu,Cls =Cls4,Imx = um4$Imx,NoLevels=20,BmSize = 1.5)
class2dist=InputDist[Cls4==2,Cls4==2]
mean(class2dist)
class1dist=InputDist[Cls4==1,Cls4==1]
mean(class2dist)
class2dist=InputDist[Cls4==3,Cls4==3]
mean(class2dist)
class2dist=InputDist[Cls4==2,Cls4==2]
mean(class2dist)
class1dist=InputDist[Cls4==1,Cls4==1]
mean(class1dist)
class3dist=InputDist[Cls4==3,Cls4==3]
mean(class3dist)
MDplot(cbind(class1dist,class2dist,class3dist))
sd(class2dist)
sd(class1dist)
sd(class3dist)
install.packages("rowr")
source('D:/Subversion/PUB/dbt/general/R/Addvectors2matrix.R')
df=Addvectors2matrix(class1dist,class2dist,class3dist)
View(DataT4)
View(df)
df=Addvectors2matrix(class1dist,class2dist)
df=Addvectors2matrix(class1dist,class2dist)
?rowr::cbind.fill
rowr::cbind.fill(class1dist,class2dist,fill=NaN)
rowr::cbind.fill(class1dist,class2dist,fill=NA)
rowr::cbind.fill(t(class1dist),t(class2dist),fill=NA)
cbind.fill(rbind(1:2),rbind(3:4))
rowr::cbind.fill(rbind(1:2),rbind(3:4))
rowr::rbind.fill(rbind(1:2),rbind(3:4))
rowr::cbind.fill(rbind(1:2),rbind(1:4))
rowr::cbind.fill(c(1:2),c(1:4))
rowr::cbind.fill(X=c(1:2),Y=c(1:4))
rowr::cbind.fill(c(1:2),c(1:4),fill = NaN)
View(df)
df=Addvectors2matrix(as.vector(class1dist),as.vector(class2dist))
View(df)
df=Addvectors2matrix(as.vector(class1dist),as.vector(class2dist),as.vector(class3dist))
df=Addvectors2matrix(class1dist[upper.tri(class1dist,diag = F)],
class2dist[upper.tri(class2dist,diag = F)],
class3dist[upper.tri(class3dist,diag = F)])
class3dist[upper.tri(class3dist,diag = F)]
upper.tri(class3dist,diag = F)
sum(upper.tri(class3dist,diag = F))
length(class3dist[upper.tri(class3dist,diag = F)])
df=Addvectors2matrix(class1dist[upper.tri(class1dist,diag = F)],
class2dist[upper.tri(class2dist,diag = F)],
class3dist[upper.tri(class3dist,diag = F)])
MDplot(df)
colnames(df)=c('Class1','Class2','Class3')
MDplot(df)
Overalldis=InputDist[upper.tri(InputDist,diag = F)]
df=Addvectors2matrix(Overalldis,class1dist[upper.tri(class1dist,diag = F)],
class2dist[upper.tri(class2dist,diag = F)],
class3dist[upper.tri(class3dist,diag = F)])
colnames(df)=c('Overall','Class1','Class2','Class3')
MDplot(df)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
source('D:/Subversion/PUB/dbt/DataVisualizations/R/bimodal.R')
MDplot(df)
df=Addvectors2matrix(Overalldis,class1dist[upper.tri(class1dist,diag = F)],
class2dist[upper.tri(class2dist,diag = F)],
class3dist[upper.tri(class3dist,diag = F)])
MDplot(df)
MDplot(df,c('a','b','c','d'))
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
colnames(df)
a=colnames(df)
paste0(a,1:4)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
duplicated(colnames(df))
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot.R')
MDplot(df)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/04DBS'))
load(file='DBSQ1_FullYahooDataV3.rda')#,Cls3,Data,Names,DataT4,InputDist,projL2,um2,proj2,imx2,DCE,MDStrans,Key,normalized)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/02Clusterungen'))
Cls=read.table(file='EndClusteringQ1.cls',sep = '\t',header = T)
ClassCount(Cls$X269)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/99RawData'))
load('YahooStocks.rda')
temp=DBSclustering(k = 3,DataOrDistance = DataT4,PlotIt = T,BestMatches = proj2$ProjectedPoints,LC = proj2$LC[c(2,1)],StructureType = F,horiz=T)
plotTopographicMap(um2$Umatrix,um2$Bestmatches,Cls =Cls$X269,Imx = imx2,NoLevels=10)
#source('D:/Subversion/PRO/Research/WissenAusDaten2014/18FinanceStocks/08AnalyseProgramme/NormalizeUmatrix.R', encoding = 'UTF-8')
um3=NormalizeUmatrix(MDStrans,um2$Umatrix,um2$Bestmatches)
um4=upscaleUmatrix(Umatrix = um3,BestMatches = um2$Bestmatches,Imx = imx2)
plotTopographicMap(um4$Umatrix,um4$Bmu,Cls =Cls4,Imx = um4$Imx,NoLevels=20,BmSize = 1.5)
plotTopographicMap(um4$Umatrix,um4$Bmu,Cls =Cls4,Imx = um4$Imx,NoLevels=20,BmSize = 1.5)
class2dist=InputDist[Cls4==2,Cls4==2]
mean(class2dist)
sd(class2dist)
class1dist=InputDist[Cls4==1,Cls4==1]
mean(class1dist)
sd(class1dist)
class3dist=InputDist[Cls4==3,Cls4==3]
mean(class3dist)
sd(class3dist)
Overalldis=InputDist[upper.tri(InputDist,diag = F)]
MDplot4multiplevectors(class1dist,
class2dist,
class3dist,
Overalldis,
Names=c('Class1','Class2','Class3','Overall')
)
MDplot4multiplevectors(class1dist,
class2dist,
class3dist,
Overalldis)
MDplot4multiplevectors(class1dist,
class2dist,
class3dist,
Overalldis)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/MDplot4multiplevectors.R')
MDplot4multiplevectors(class1dist,
class2dist,
class3dist,
Overalldis,
Names=c('Class1','Class2','Class3','Overall')
)
warnings()
MDplot4multiplevectors(Overalldis,class1dist[upper.tri(class1dist,diag = F)],
class2dist[upper.tri(class2dist,diag = F)],
class3dist[upper.tri(class3dist,diag = F)]
,Names=c('Overall','Class1','Class2','Class3'))
blockDBT()
updateDBT()
updateDBT()
install.packages("D:/Subversion/PUB/dbt/DatabionicSwarm_1.1.2.tar.gz", repos = NULL, type = "source")
unblockDBT()
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/04DBS'))
load(file='DBSQ1_FullYahooDataV3.rda')#,Cls3,Data,Names,DataT4,InputDist,projL2,um2,proj2,imx2,DCE,MDStrans,Key,normalized)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/02Clusterungen'))
Cls=read.table(file='EndClusteringQ1.cls',sep = '\t',header = T)
ClassCount(Cls$X269)
setwd(ReDi('WissenAusDaten2014/18FinanceStocks/99RawData'))
load('YahooStocks.rda')
temp=DBSclustering(k = 3,DataOrDistance = DataT4,PlotIt = T,BestMatches = proj2$ProjectedPoints,LC = proj2$LC[c(2,1)],StructureType = F,horiz=T)
plotTopographicMap(um2$Umatrix,um2$Bestmatches,Cls =Cls$X269,Imx = imx2,NoLevels=10)
#source('D:/Subversion/PRO/Research/WissenAusDaten2014/18FinanceStocks/08AnalyseProgramme/NormalizeUmatrix.R', encoding = 'UTF-8')
um3=NormalizeUmatrix(MDStrans,um2$Umatrix,um2$Bestmatches)
um4=upscaleUmatrix(Umatrix = um3,BestMatches = um2$Bestmatches,Imx = imx2)
plotTopographicMap(um4$Umatrix,um4$Bmu,Cls =Cls4,Imx = um4$Imx,NoLevels=20,BmSize = 1.5)
plotTopographicMap(um4$Umatrix,um4$Bmu,Cls =Cls4,Imx = um4$Imx,NoLevels=20,BmSize = 1.5)
class2dist=InputDist[Cls4==2,Cls4==2]
mean(class2dist)
sd(class2dist)
class1dist=InputDist[Cls4==1,Cls4==1]
mean(class1dist)
sd(class1dist)
class3dist=InputDist[Cls4==3,Cls4==3]
mean(class3dist)
sd(class3dist)
Overalldis=InputDist[upper.tri(InputDist,diag = F)]
MDplot4multiplevectors(Overalldis,class1dist[upper.tri(class1dist,diag = F)],
class2dist[upper.tri(class2dist,diag = F)],
class3dist[upper.tri(class3dist,diag = F)]
,Names=c('Overall','Class1','Class2','Class3'))
mean(class2dist)
mean(class1dist)
mean(class3dist)
AdaptGauss(Overalldis)
updateDBT()
updateDBT()
unblockDBT()
blockDBT()
library(DatabionicSwarm)
unblockDBT()
library(DatabionicSwarm)
data('Hepta')
InputDistances = as.matrix(dist(Hepta$Data))
projection = Pswarm(InputDistances)
library(DatabionicSwarm)
library(GeneralizedUmatrix)
genUmatrixList = GeneratePswarmVisualization(
Data = Hepta$Data,
projection$ProjectedPoints,
projection$LC)
library(DatabionicSwarm)
library(GeneralizedUmatrix)
Cls = DBSclustering(
k = 7,
Hepta$Data,
genUmatrixList$Bestmatches,
genUmatrixList$LC,
PlotIt = FALSE
)
GeneralizedUmatrix::plotTopographicMap(
genUmatrixList$Umatrix,
genUmatrixList$Bestmatches,
Cls,
NoLevels = 10)
